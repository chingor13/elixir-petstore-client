# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Petstore.Api.Store do
  @moduledoc """
  API calls for all endpoints tagged `Store`.
  """

  alias Petstore.Connection
  import Petstore.RequestBuilder


  @doc """
  Delete purchase order by ID
  For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - order_id (Integer): ID of the order that needs to be deleted
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_order(Tesla.Env.client, Integer.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_order(connection, order_id, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:delete)
    |> url("/store/order/#{order_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Returns pet inventories by status
  Returns a map of status codes to quantities

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_inventory(Tesla.Env.client, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def get_inventory(connection, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:get)
    |> url("/store/inventory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Find purchase order by ID
  For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10. Other values will generated exceptions

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - order_id (Integer): ID of pet that needs to be fetched
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Petstore.Model.Order{}} on success
  {:error, info} on failure
  """
  @spec get_order_by_id(Tesla.Env.client, Integer.t, keyword()) :: {:ok, Petstore.Model.Order.t} | {:error, Tesla.Env.t}
  def get_order_by_id(connection, order_id, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:get)
    |> url("/store/order/#{order_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Petstore.Model.Order{})
  end

  @doc """
  Place an order for a pet
  

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - body (Order): order placed for purchasing the pet
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Petstore.Model.Order{}} on success
  {:error, info} on failure
  """
  @spec place_order(Tesla.Env.client, Petstore.Model.Order.t, keyword()) :: {:ok, Petstore.Model.Order.t} | {:error, Tesla.Env.t}
  def place_order(connection, body, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:post)
    |> url("/store/order")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Petstore.Model.Order{})
  end
end
