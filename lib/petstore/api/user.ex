# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Petstore.Api.User do
  @moduledoc """
  API calls for all endpoints tagged `User`.
  """

  alias Petstore.Connection
  import Petstore.RequestBuilder


  @doc """
  Create user
  This can only be done by the logged in user.

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - body (User): Created user object
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec create_user(Tesla.Env.client, Petstore.Model.User.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def create_user(connection, body, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:post)
    |> url("/user")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Creates list of users with given input array
  

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - body (List[User]): List of user object
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec create_users_with_array_input(Tesla.Env.client, list(Petstore.Model.User.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def create_users_with_array_input(connection, body, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:post)
    |> url("/user/createWithArray")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Creates list of users with given input array
  

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - body (List[User]): List of user object
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec create_users_with_list_input(Tesla.Env.client, list(Petstore.Model.User.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def create_users_with_list_input(connection, body, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:post)
    |> url("/user/createWithList")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Delete user
  This can only be done by the logged in user.

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - username (String): The name that needs to be deleted
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_user(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_user(connection, username, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:delete)
    |> url("/user/#{username}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Get user by user name
  

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - username (String): The name that needs to be fetched. Use user1 for testing. 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Petstore.Model.User{}} on success
  {:error, info} on failure
  """
  @spec get_user_by_name(Tesla.Env.client, String.t, keyword()) :: {:ok, Petstore.Model.User.t} | {:error, Tesla.Env.t}
  def get_user_by_name(connection, username, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:get)
    |> url("/user/#{username}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Petstore.Model.User{})
  end

  @doc """
  Logs user into the system
  

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - username (String): The user name for login
  - password (String): The password for login in clear text
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Petstore.Model.String{}} on success
  {:error, info} on failure
  """
  @spec login_user(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def login_user(connection, username, password, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:get)
    |> url("/user/login")
    |> add_param(:query, :"username", username)
    |> add_param(:query, :"password", password)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Logs out current logged in user session
  

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec logout_user(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def logout_user(connection, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:get)
    |> url("/user/logout")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Updated user
  This can only be done by the logged in user.

  ## Parameters

  - connection (Petstore.Connection): Connection to server
  - username (String): name that need to be updated
  - body (User): Updated user object
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec update_user(Tesla.Env.client, String.t, Petstore.Model.User.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def update_user(connection, username, body, opts \\ []) do
    optional_params = %{
      
    }

    %{}
    |> method(:put)
    |> url("/user/#{username}")
    |> add_param(:body, :"body", body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end
end
